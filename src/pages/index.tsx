import { SignIn,useUser,SignOutButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import relativeTime from 'dayjs/plugin/relativeTime'
import dayjs from "dayjs";
import LoadingSpinner from "~/components/loading";
import { RouterOutputs, api } from "~/utils/api";
import { useState } from "react";


dayjs.extend(relativeTime)

const CreatePostWizard = ()=>{
  const [input, setInput]=useState('')
  const {user} = useUser()

  const ctx=api.useContext()

  if(!user) return null
  const {mutate,isLoading:isPosting} = api.posts.create.useMutation({
    onSuccess:()=>{
      setInput("")
      ctx.posts.getAll.invalidate()
    }
  })


  return (
<div className="flex   gap-2 w-full">
      <Image className="m-2 rounded-full" width={40} height={40} alt="profilepic" src={user.profileImageUrl} ></Image>
      <input disabled={isPosting} value={input} onChange={(e)=>{setInput(e.target.value)}} className="bg-transparent w-full m-2 grow outline-none" placeholder="Type something"></input>
      <button onClick={()=>mutate({content:input})}>Post</button>
      </div>
  )
}

type PostWithUser= RouterOutputs["posts"]["getAll"][number]


const PostView= (props:PostWithUser)=>{
  const {post,author}=props
  const idd=String(author?.id.id)
  let imgSrc=""
  if(author)
  {imgSrc= author?.profileImageUrl}
  else{
   imgSrc= "profilepic"
  }


  return (
    <div className="p-8  border-b w-full flex flex-row items-center gap-4 border-slate-400" key={post.id}>
    <Image src={imgSrc} width={40} height={40} alt="profile_pic">
      </Image ><div className="flex flex-col">
        <div className="flex gap-3 font-semibold">
        <label>{`@${author?.username}`}</label>
        <label>{`${dayjs(post?.createdAt).fromNow()}`}</label></div>
        <div>{post.content}</div></div></div>
  )

}


const Feed = ()=>{
  const {data, isLoading:postsLoading } = api.posts.getAll.useQuery()
  if(postsLoading){
    return (<LoadingSpinner></LoadingSpinner>)
  }
  if(!data){
    return <div>Something went wrong</div>
  }

  return (
    <div className="flex  flex-col w-full">
    {data.map((fullPost)=>(
 <PostView {...fullPost} key={fullPost.post.id}></PostView>

    ))}
  </div>
  )
}

const Home: NextPage = () => {
  const {user,isLoaded:userLoaded,isSignedIn} = useUser()
//75 caches the data as soon as it is called
// and then when the same function is called again in feed it can use the cache
  api.posts.getAll.useQuery()


  if(!userLoaded) return <div></div>




  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="border-x w-full flex flex-col md:max-w-2xl  items-center border-blue-50  ">
          <div className="flex w-full justify-between">
          {isSignedIn&&( <div><CreatePostWizard></CreatePostWizard> </div>)}

          <div className="p-4">
 {!isSignedIn&&<SignIn></SignIn>}
 {!!isSignedIn&&<SignOutButton></SignOutButton>}
 </div>


          </div>

 <hr className="p-2 w-full"></hr>
<Feed></Feed>
        </div>
      </main>
    </>
  )
}

export default Home;
