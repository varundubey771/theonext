import { SignIn,useUser,SignOutButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import { ProfileFeed } from "~/components/postview";

import { api } from "~/utils/api";
// const ProfileFeed = (props:{userId:string})=>{
//   const {data, isLoading}=api.posts.getPostByName.useQuery({
//     userId:props.userId
//   })
//   console.log("gr8gr8gr8gr8",data)
//   if (isLoading) return <LoadingSpinner></LoadingSpinner>
//   if(!data||data.length===0) return <div >User has not posted</div>
//   return (
//     <div className="flex flex-col">
//       {data.map((post)=>(
// <PostView {...post} key={post.author?.id}></PostView>
//       ))}
//        </div>
//   )
// }



const SinglePostPage: NextPage<{postId:string}> = ({postId}) => {

const {data,isLoading} =api.posts.getById.useQuery({postId:postId})
if(isLoading){
  console.log("is loadinggggggg")
  return <LoadingSpinner></LoadingSpinner>
}
if(!data){
  return <div>404</div>
}
let auth=""
if(!data.author?.username){
   auth=''
}
else{
   auth=data.author.username
}

  return (
    <>
      <Head>
        <title>{`${data.post.content} - @${auth}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
<PageLayout>
  <div className=" relative h-32 w-full">
    <PostView {...data}></PostView>
</div>

       </PageLayout>

    </>
  )
}


import { createServerSideHelpers } from '@trpc/react-query/server';
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson"
import { getAuth } from "@clerk/nextjs/server";
import PageLayout from "~/components/layout";
import LoadingSpinner from "~/components/loading";
import { PostView } from "~/components/postview";



export const getStaticProps  = async(context: { params: { id: string; }; })=>{



const user ={id:""}
 const ssg= createServerSideHelpers({
    router: appRouter,
    ctx: {prisma,currentUser:user?.id},
    transformer: superjson, // optional - adds superjson serialization
  });
  const postId = context.params?.id
  console.log("hahahah")


  if(typeof postId!=="string") throw new Error("no post")




await ssg.posts.getById.prefetch({postId})

  return {
    props:{
      trpcState: ssg.dehydrate(),
      postId
    }
  }


}

export const getStaticPaths =  ()=>{
  return {paths:[], fallback:"blocking"}
}

export default SinglePostPage;
